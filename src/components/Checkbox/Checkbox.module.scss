@import "../../styles/global-css-settings";
@import "../../styles/themes";
@import "../../styles/typography";
@import "../../styles/states";
$checkbox-size: 16px;

@mixin hover-selected {
  @include theme-prop(background-color, primary-hover-color);
  border-color: transparent;
}

@mixin hover-unselected {
  @include theme-prop(border-color, secondary-text-color);
}

.wrapper {
  position: relative;
  display: flex;
  align-items: center;
  width: fit-content;
  height: min-content;
}

.checkbox {
  cursor: pointer;
  visibility: visible;
  display: flex;
  justify-content: center;
  flex-direction: column;
  height: $checkbox-size;
  width: $checkbox-size;
  border: 1px solid;
  @include theme-prop(border-color, ui-border-color);
  border-radius: $border-radius-extra-small;
  transition: transform var(--motion-productive-short) var(--motion-timing-enter);
  position: relative;
  overflow: hidden;
}

.checkbox:after {
  content: " ";
  background-color: transparent;
  position: absolute;
  height: $checkbox-size;
  z-index: 2;
  left: 0;
  right: 0;
  width: 100%;
}

.checkbox:hover {
  @include hover-unselected;
}

.icon {
  width: 100%;
  @include theme-prop(color, text-color-on-primary);
  visibility: hidden;
}

.label {
  @include font-input();
  cursor: pointer;
  user-select: none;
  margin-inline-start: $spacing-small;
  @include theme-prop(color, primary-text-color);
}

/* Since it is not possible to change the design of the checkbox according to the requirements using css, */
/* we hide the checkbox and draw a new one instead. */
/* In order to allow accessibility, all operations will be performed on the hidden checkbox and be reflected */
.input {
  @include hidden-element();
}

/* For any active attribute in the hidden checkbox, we will change the appearance of the checkbox we drew in its place. */

.input:focus + .checkbox {
  @include hover-unselected;
}

.input:focus:checked + .checkbox {
  @include hover-selected;
}

.input:focus-visible + .checkbox {
  outline: none;
  border: 1px solid;
  @include theme-prop(border-color, primary-color);
  box-shadow: 0 0 0 3px hsla(209, 100%, 50%, 0.5);
  border-radius: 2px;
}

.input:checked:focus + .checkbox:after,
.input:indeterminate:focus + .checkbox:after {
  @include theme-prop(background-color, primary-hover-color);
}

.input:checked + .checkbox,
.input:indeterminate + .checkbox {
  animation: checkboxGrowAnimation var(--motion-productive-short);
}

.input:checked + .checkbox,
.input:indeterminate + .checkbox {
  @include theme-prop(background-color, primary-color);
  border-color: transparent;
}

.input:checked + .checkbox:hover,
.input:indeterminate + .checkbox:hover {
  @include hover-selected;
}

.input:checked + .checkbox:hover:after,
.input:indeterminate + .checkbox:hover:after {
  @include theme-prop(background-color, primary-hover-color);
}

.input:checked + .checkbox:after,
.input:indeterminate + .checkbox:after {
  content: " ";
  @include theme-prop(background-color, primary-color);
  height: $checkbox-size;
  transform: scaleX(0);
  transition: transform var(--motion-productive-long);
  transform-origin: right;
  left: 0;
}

.input:checked + .checkbox > .icon,
.input:indeterminate + .checkbox > .icon {
  visibility: visible;
}

.input:checked:disabled + .checkbox:after,
.input:indeterminate:disabled + .checkbox:after {
  @include theme-prop(background-color, disabled-background-color);
}

.input:disabled + .checkbox,
.input:disabled + .checkbox:hover {
  @include theme-prop(background-color, disabled-background-color);
  @include theme-prop(border-color, ui-border-color);
}

.input:disabled + .checkbox .icon,
.input:disabled + .checkbox:hover .icon {
  @include theme-prop(color, disabled-text-color);
}

.input:disabled + .checkbox,
.input:disabled + .checkbox:hover {
  cursor: not-allowed;
}

.input:disabled ~ .label {
  cursor: not-allowed;
  color: var(--disabled-text-color);
}

@keyframes checkboxGrowAnimation {
  0% {
    transform: scale(0.8);
  }
  100% {
    transform: scale(1);
  }
}
